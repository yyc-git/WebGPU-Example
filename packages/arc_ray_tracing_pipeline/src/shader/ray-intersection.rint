#version 460
#extension GL_EXT_ray_tracing : enable
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_scalar_block_layout : enable
#pragma shader_stage(intersect)

// TODO duplicate

struct RayPayload {
  vec3 radiance;
  vec2 target;
};

struct Instance {
  // /*
  //  because scalar not work(not support float objId; mat4 modelMatrix;),
  //  so all aligned to vec4
  //  */

  // include geometryIndex, materialIndex, localPosition
  // vec4 compressedData;

  float geometryIndex;
  float materialIndex;
  // vec2 localPosition;
  float pad_0;
  float pad_1;
};

struct Geometry {
  vec2 c;
  float w;
  float r;
};

layout(std140, set = 0, binding = 2) buffer SceneInstanceData {
  Instance instances[];
}
sceneInstanceData;

layout(std140, set = 0, binding = 3) buffer SceneGeometryData {
  Geometry geometrys[];
}
sceneGeometryData;

bool _isIntersectWithRing(vec2 point, Geometry geometry) {
  vec2 c = geometry.c;
  float w = geometry.w;
  float r = geometry.r;

  //   var worldPosition = localPosition + c;

  //   var distanceSquare =
  //       pow(point.x - worldPosition.x, 2.0) + pow(point.y -
  //       worldPosition.y, 2.0);

  vec2 localPosition = c;

  float distanceSquare =
      pow(point.x - localPosition.x, 2.0) + pow(point.y - localPosition.y, 2.0);

  return distanceSquare >= pow(r, 2) && distanceSquare <= pow(r + w, 2);
}

void main() {
  // RayPayload ray;
  // //   ray.origin    = gl_WorldRayOriginEXT;
  // //   ray.direction = gl_WorldRayDirectionEXT;
  // ray.target = gl_ObjectRayDirectionEXT.xy;

  // vec2 point = ray.target;

  // uint instanceIndex = gl_InstanceID;

  // Instance instance = sceneInstanceData.instances[instanceIndex];
  // uint geometryIndex = uint(instance.geometryIndex);
  // Geometry geometry = sceneGeometryData.geometrys[geometryIndex];

  // if (_isIntersectWithRing(point, geometry)) {
  //   float tHit = 0.1;
  //   uint hitKind = 0;

  //   reportIntersectionEXT(tHit, hitKind);
  // }


    float tHit = 0.1;
    uint hitKind = 0;

    reportIntersectionEXT(tHit, hitKind);
}