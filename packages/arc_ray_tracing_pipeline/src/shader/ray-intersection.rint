#version 460
#extension GL_EXT_ray_tracing : enable
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_scalar_block_layout : enable
#pragma shader_stage(intersect)

// TODO duplicate

// struct RayPayload {
//   vec3 radiance;
//   vec2 target;
// };

struct Instance {
  // /*
  //  because scalar not work(not support float objId; mat4 modelMatrix;),
  //  so all aligned to vec4
  //  */

  // include geometryIndex, materialIndex, localPosition
  // vec4 compressedData;

  float geometryIndex;
  float materialIndex;
  // vec2 localPosition;
  float pad_0;
  float pad_1;
};

// struct Geometry {
//   vec2 c;
//   float w;
//   float r;
// };
struct Geometry2 {
  vec2 c;
  float w;
  float r;

  vec2 c2;
  float w2;
  float r2;
};

layout(std140, set = 0, binding = 2) buffer SceneInstanceData {
  Instance instances[];
}
sceneInstanceData;

// layout(std140, set = 0, binding = 3) buffer SceneGeometryData {
//   Geometry geometrys[];
// }
// sceneGeometryData;

layout(std140, set = 0, binding = 3) buffer SceneGeometryData2 {
  Geometry2 geometrys[];
}
sceneGeometryData2;

// bool _isIntersectWithRing(vec3 origin, vec3 direction, Geometry geometry) {
//   vec2 c = geometry.c;
//   float w = geometry.w;
//   float r = geometry.r;

//   vec3 center = vec3(c, 0.0);

//   vec3 u = center - origin;

//   float dLen = length(direction);

//   vec3 directionProjection = dot(u, direction) * direction / pow(dLen, 2);

//   float distance = length(u - directionProjection);

//   return distance >= r && distance <= r + w;
// }

// bool _isIntersectWithRing(vec2 point, Geometry geometry) {
//   vec2 c = geometry.c;
//   float w = geometry.w;
//   float r = geometry.r;

//   vec2 worldPosition = vec2(gl_ObjectToWorldEXT * vec4(c, 0.0, 1.0));

//   float distanceSquare =
//       pow(point.x - worldPosition.x, 2) + pow(point.y - worldPosition.y, 2);

//   return distanceSquare >= pow(r, 2) && distanceSquare <= pow(r + w, 2);
// }

bool _isIntersectWithRing2(vec2 point, Geometry2 geometry) {
  vec2 c = geometry.c;
  float w = geometry.w;
  float r = geometry.r;

  vec2 c2 = geometry.c2;
  float w2 = geometry.w2;
  float r2 = geometry.r2;

  vec2 worldPosition = vec2(gl_ObjectToWorldEXT * vec4(c, 0.0, 1.0));

  float distanceSquare =
      pow(point.x - worldPosition.x, 2) + pow(point.y - worldPosition.y, 2);

  vec2 worldPosition2 = vec2(gl_ObjectToWorldEXT * vec4(c2, 0.0, 1.0));

  float distanceSquare2 =
      pow(point.x - worldPosition2.x, 2) + pow(point.y - worldPosition2.y, 2);

  return distanceSquare >= pow(r, 2) && distanceSquare <= pow(r + w, 2) ||
         (distanceSquare2 >= pow(r2, 2) && distanceSquare2 <= pow(r2 + w2, 2));
  // return distanceSquare2 >= pow(r2, 2) && distanceSquare2 <= pow(r2 + w2, 2);
}

void main() {
  uint instanceIndex = gl_InstanceID;

  Instance instance = sceneInstanceData.instances[instanceIndex];
  uint geometryIndex = uint(instance.geometryIndex);
  // Geometry geometry = sceneGeometryData.geometrys[geometryIndex];
  Geometry2 geometry = sceneGeometryData2.geometrys[geometryIndex];

  // // if (_isIntersectWithRing(point, geometry)) {
  // // if (_isIntersectWithRing(gl_WorldRayOriginEXT.xy,
  // // gl_WorldRayDirectionEXT.xy,
  // // if (_isIntersectWithRing(gl_WorldRayOriginEXT, gl_WorldRayDirectionEXT,
  // // if (_isIntersectWithRing(gl_WorldRayOriginEXT, gl_WorldRayDirectionEXT,
  // // if (_isIntersectWithRing(gl_ObjectRayOriginEXT.xy,
  // if (_isIntersectWithRing(gl_ObjectRayOriginEXT, gl_ObjectRayDirectionEXT,
  //                          geometry)) {
  //   /*! should > 0.0 !*/
  //   float tHit = 0.0001;

  //   uint hitKind = 0;

  //   reportIntersectionEXT(tHit, hitKind);
  // }

  const ivec2 ipos = ivec2(gl_LaunchIDEXT.xy);
  const ivec2 resolution = ivec2(gl_LaunchSizeEXT.xy);

  const vec2 sampledPixel = vec2(ipos.x + 0.5, ipos.y + 0.5);

  const vec2 uv = (sampledPixel / resolution) * 2.0 - 1.0;

  vec2 point = uv;

  // if (_isIntersectWithRing(point, geometry)) {
  if (_isIntersectWithRing2(point, geometry)) {
    /*! should > 0.0 !*/
    float tHit = 0.1;

    uint hitKind = 0;

    reportIntersectionEXT(tHit, hitKind);
  }
}