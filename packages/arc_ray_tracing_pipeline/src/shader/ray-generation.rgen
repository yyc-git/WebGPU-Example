#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_scalar_block_layout : enable
#pragma shader_stage(raygen)

struct RayPayload {
  vec3 radiance;
  vec2 target;
};

layout(location = 0) rayPayloadEXT RayPayload payload;

layout(set = 0, binding = 0) uniform accelerationStructureEXT topLevelAS;

layout(std140, set = 0, binding = 1) buffer PixelBuffer { vec4 pixels[]; }
pixelBuffer;

// layout(std140, set = 0, binding = 5) uniform Camera {
//   mat4 viewInverse;
//   mat4 projectionInverse;
//   float near;
//   float far;
//   float pad_0;
//   float pad_1;
// }
// uCamera;

void main() {
  const ivec2 ipos = ivec2(gl_LaunchIDEXT.xy);
  const ivec2 resolution = ivec2(gl_LaunchSizeEXT.xy);

  // vec4 origin = uCamera.viewInverse * vec4(0, 0, 0, 1);
  // vec4 origin = vec4(0, 0, -1, 1);
  // vec4 origin = vec4(0, 0, -0.1, 1);
  // vec4 origin = vec4(0, 0, 0.1, 1);
  // vec4 origin = vec4(0, 0, 0.5, 1);
  vec4 origin = vec4(0, 0, 1, 1);

  // const vec2 pixel = vec2(ipos.x, ipos.y);
  // const vec2 uv = (pixel / resolution) * 2.0 - 1.0;

  const vec2 sampledPixel = vec2(ipos.x + 0.5, ipos.y + 0.5);

  const vec2 uv = (sampledPixel / resolution) * 2.0 - 1.0;

  // vec4 target = uCamera.projectionInverse * (vec4(uv.x, uv.y, -1, 1));
  vec3 target = vec3(uv.x, uv.y, -1);
  // vec4 direction =
  //     normalize(uCamera.viewInverse * vec4(normalize(target.xyz), 0));

  // vec3 direction = target - origin.xyz;
  vec3 direction = target;
  //   vec4 target = uCamera.projectionInverse * (vec4(uv.x, uv.y, -1, 1));
  // vec4 direction =
  //     normalize(uCamera.viewInverse * vec4(normalize(target.xyz), 0));

  // payload.radiance = vec3(0.0);

  const uint cullMask = 0xFF;

  const uint pixelIndex = ipos.y * resolution.x + ipos.x;

  // if (vec3(pixelBuffer.pixels[pixelIndex]) == vec3(0.0)) {
  // if (pixelBuffer.pixels[pixelIndex].r == 0.0) {

  // TODO use bool
  // if (pixelBuffer.pixels[pixelIndex].r > (0.0 - 0.1) ||
  //     pixelBuffer.pixels[pixelIndex].r < (0.0 + 0.1)) {
  if (pixelBuffer.pixels[pixelIndex].r != 1.0) {
    // if (pixelBuffer.pixels[pixelIndex].w == 1.0) {
    traceRayEXT(topLevelAS,           // acceleration structure
                gl_RayFlagsOpaqueEXT, // rayFlags
                cullMask,             // cullMask
                0,                    // sbtRecordOffset
                0,                    // sbtRecordStride
                0,                    // missIndex
                origin.xyz,           // ray origin
                // uCamera.near,         // ray min range
                0.1,
                // direction.xyz,        // ray direction
                direction, // ray direction
                // uCamera.far,          // ray max range
                1.0,
                0 // payload (location = 0)
    );
  } else {
    payload.radiance = vec3(pixelBuffer.pixels[pixelIndex]);
  }
  // traceRayEXT(topLevelAS,          // acceleration structure
  //             gl_RayFlagsOpaqueEXT, // rayFlags
  //             cullMask,             // cullMask
  //             0,                    // sbtRecordOffset
  //             0,                    // sbtRecordStride
  //             0,                    // missIndex
  //             origin.xyz,           // ray origin
  //             // uCamera.near,         // ray min range
  //             0.1,
  //             // direction.xyz,        // ray direction
  //             direction, // ray direction
  //             // uCamera.far,          // ray max range
  //             1.0,
  //             0 // payload (location = 0)
  // );

  // payload.radiance = vec3(1.0,0.0,0.0);

  // float w;
  // if (payload.radiance == vec3(0.0)) {
  //   w = 0.0;
  // } else {
  //   w = 1.0;
  // }

  // const uint pixelIndex = ipos.y * resolution.x + ipos.x;
  pixelBuffer.pixels[pixelIndex] = vec4(payload.radiance, 1.0);
  // pixelBuffer.pixels[pixelIndex] = vec4(payload.radiance, w);
  // pixelBuffer.pixels[pixelIndex] = vec4(radiance, 1.0);
}
