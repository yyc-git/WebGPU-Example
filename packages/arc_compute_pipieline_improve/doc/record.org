* TODO perf: optimize Traversal bvh on gpu

refer to https://zhuanlan.zhihu.com/p/70387497


# ** TODO change to one layer

** TODO perf: 基于Ray Packet的并行

packet size: 8*8?

if the whole aabb of packet not intersect with node's whole aabb, skip it;



*** DONE cpu draft

8*8

first relate to node
# , end?

rebuild aabb of first-





*** DONE pass cpu run test


*** DONE gpu draft

*** DONE pass gpu run test


test: increase r


judge isRayPacketAABBIntersectWithTopLevelNode by simple build:

fps from 40 to 55(10W rings)


debug:
change canvas size to 8*8(one workgroup)

explain:

- coordniate system is [-1.0,1.0]
TODO give image


verify:

- point of (LocalInvocationIndex == 0) is left-bottom conner point of 8*8 region
- point of (LocalInvocationIndex == 56) is left-top conner point of 8*8 region
# so dispatch local unit(and workgroup?) is x first!
so LocalInvocationIndex is increase toward right and top(start from left and bottom)!


code:
```
// if(LocalInvocationIndex == 0){
if(LocalInvocationIndex == 56){
  //pointInScreen is left-bottom conner point of 8*8 region

  var resolution = vec2 < f32 > (screenDimension.resolution);
  var step = 2 / resolution;

  var rayPacketAABB:AABB2D;



  // rayPacketAABB.screenMin = vec2<f32>(pointInScreen.x, pointInScreen.y - 7 * step.y);
  // rayPacketAABB.screenMax = vec2<f32>(pointInScreen.x + 7.0 * step.x, pointInScreen.y - f32(_getMultiplierForBuildRayPacketAABB(firstActiveRayIndex)) * step.y);

  // rayPacketAABB.screenMin = pointInScreen;
  // rayPacketAABB.screenMax = vec2<f32>(pointInScreen.x + 7 * step.x, pointInScreen.y + 7 * step.y);


  rayPacketAABB.screenMin = vec2<f32>(pointInScreen.x + 6.2 * step.x, pointInScreen.y - 7 * step.y );
  // rayPacketAABB.screenMin = vec2<f32>(pointInScreen.x, pointInScreen.y - 7 * step.y );
  // rayPacketAABB.screenMax = vec2<f32>(pointInScreen.x + 7 * step.x, pointInScreen.y);
  rayPacketAABB.screenMax = vec2<f32>(pointInScreen.x + 7 * step.x, pointInScreen.y - 6.3 * step.y);

  // rayPacketAABB.screenMin = vec2<f32>(0.0, -1.0);
  // rayPacketAABB.screenMax = vec2<f32>(0.0, -0.7);

  isRayPacketAABBIntersectWithTopLevelNode = _isRayPacketAABBIntersectWithTopLevelNode(rayPacketAABB, currentNode);
}


// TODO perf: other local units to find first!(if firstActiveRayIndex > 0)

        workgroupBarrier();

		if (!isRayPacketAABBIntersectWithTopLevelNode) {
			continue;
		}
```







TODO perf: other local units to find first!(if firstActiveRayIndex > 0)



TODO fix bug: bottom some lines

*** DONE benchmark compare
before: 10

after: ?


*** DONE gpu draft: perf: judge maxLayer

TODO fix: why break decrease fps?:
https://stackoverflow.com/questions/30256579/is-early-exit-of-loops-on-gpu-worth-doing

https://forums.developer.nvidia.com/t/issue-while-using-break-statement-in-cuda-kernel/19929/12

should use flag!



before: 43

atomic:33





31.2

31.2

31.2

First Add During Load:?

unroll:31.8


TODO why "if(maxLayer <=rayPacketRingIntersectMinLayer){" slow????





TODO perf: optimize if(share)


*** DONE pass gpu run test

*** DONE benchmark compare


*** DONE perf: handle children

TODO ensure: one node always has two children!


*** DONE why fps drop???


bank conflict???
broadcast?

not change in RTX



reason:
mac may not support 广播机制 but RTX support


*** TODO why "if (LocalInvocationIndex == 16) {" bug???
why "if (LocalInvocationIndex == 32) {" bug??? in RTX card

half-wrap in mac?

wrap schedule?



**** TODO fix == 63 before while?


*** TODO perf: latten hidden optimize?


*** TODO perf: share intersectResult ?

for store in shared memory instead of local memory?



*** TODO perf: optimize memory use




*** TODO why rtx change from 45 to 33?




*** TODO perf: switch to 4*8 or 8*4?



*** TODO add last

update:
build ray packet aabb;
isNodeBehindRayPacket->get min layer;



*** TODO perf: get min layer: change to parallel

unroll?


*** TODO perf: split to two aabb




** TODO perf: N branch BVH tree


# ** TODO study Bulk-Synchronous Parallel Simultaneous BVH Traversal for Collision Detection on GPUs

refer to:
https://www.pure.ed.ac.uk/ws/portalfiles/portal/60657582/bulk_synchronous_parallel_bvh_traversal_for_collision_detection_on_gpus_authorversion_.pdf



** TODO perf: traverse bvh: use stack-less

not limit maxDepth when build bvh!



# ** TODO restore to multiple layers


* TODO fix: fix buildRenderData->buffer data


* TODO refactor: remove resolution buffer
use: 
const ivec2 resolution = ivec2(gl_LaunchSizeEXT.xy);


* TODO fix TopLevel, BottomLevel

struct BVHNode {
  worldMin : vec2<f32>,
  worldMax : vec2<f32>,

#   transformMatrix : mat3x2<f32>,
  
leafInstanceTopLevelIndex:f32,
maxLayer:f32,

	child1Index: f32,

	TODO remove child2Index, make child2 next to child1!!!
	# child2Index: f32


}


struct TopLevel {
  transformMatrix : mat3x2<f32>,
  
	leafInstanceOffset: f32,
	leafInstanceCount: f32,

instanceIndex: f32,
}


struct BottomLevel {
  localMin : vec2<f32>,
  localMax : vec2<f32>,
}

* TODO draw > 4M rings(10M, 100M)

** TODO perf: optimize top level memory

split tlas by layer


** TODO multiple render


* TODO perf: if intersectResult.layer === tlas group's max layer, stop traverse!



* TODO feat: build bvh on CPU

use HLBVH:
https://blog.csdn.net/qq_39300235/article/details/107006830
https://research.nvidia.com/sites/default/files/pubs/2010-06_HLBVH-Hierarchical-LBVH/HLBVH-final.pdf

or HLBVH with work queues:
https://research.nvidia.com/publication/simpler-and-faster-hlbvh-work-queues

or GPU-based Out-of-Core HLBVH Construction: https://diglib.eg.org/bitstream/handle/10.2312/sre20151165/041-050.pdf?sequence=1






* TODO spilit BottomLevel to multiple storage buffers


fix error:
index.html:1 Binding size (160000000) is larger than the maximum binding size (134217728).
 - While validating entries[1] as a Buffer.
Expected entry layout: { binding: 1, visibility: ShaderStage::Compute, buffer: { type: BufferBindingType::ReadOnlyStorage, hasDynamicOffset: 0, minBindingSize: 0 } }
 - While validating [BindGroupDescriptor] against [BindGroupLayout]
 - While calling [Device].CreateBindGroup([BindGroupDescriptor]).






* TODO perf: bvh


** TODO feat: build,update bvh on gpu

** TODO feat: update bvh

refer to:
https://zhuanlan.zhihu.com/p/374748734
Fast, Effective BVH Updates for Animated Scenes: https://hwrt.cs.utah.edu/papers/hwrt_rotations.pdf


** TODO perf: optimize Traversal bvh on gpu

refer to https://zhuanlan.zhihu.com/p/70387497

*** TODO perf: traverse bvh: use stack-less

not limit maxDepth when build bvh!





