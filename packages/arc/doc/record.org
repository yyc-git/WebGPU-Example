* DONE draw one ring

use ray-tracing: screen ?

AccelerationStructure:
c, w, r
(purpose: local = world)


# first judge(fast)
first judge(fast): 2d aabb
second judge(precise)




get first one(add z?)


screen coordinate?


cpu:

scene buffer:
# transform: pos(c), scale
# 	use 2(position) + 2(scale) instead of 16(world matrix)!
transform: pos(c)
	use 2(position) instead of 16(world matrix)!
geometry: w, r
material: color

render ArrayBuffer:  map to gpu


1b * n byte = n GB


* DONE draw 2 ring

one geometry, one material, two transforms

* DONE object move

# perf: 2d matrix operate!

transform: pos(c)
	use 2(position) instead of 16(world matrix)!

* TODO draw 1b ring

perf hots:

arrayLength

_intersectScene

_isIntersectWithAABB2D



solution:
use fixed accelerationStructures count;
use bvh;
optimize _isIntersectWithAABB2D;


should at least draw 10m ring at 60fps!


** DONE perf: use 2d bvh


*** DONE implement build

*** DONE add bdd test


*** DONE implement traverse

*** DONE add bdd test

*** DONE update compute shader

*** DONE pass run test


*** DONE perf: limit max depth to 10

*** DONE perf: use lbvh to build
# *** TODO perf: use Surface Area Heuristic (SAH) to build

# test transformCount: 1m



TODO fix bug!
compare more aabbs with old implement and new implement!


# add test case:
# box1 and box2's center is the same


add test case:
test _findBit
test _mortonEncodeGridPositionByMagicbits:
1111001101 1111101011

11111111100011011011



** DONE perf: workgroup_size?
query workgroup_size?

run particl(adjust workgroup_size) to test perf!

how to pass workgroup_size(x, y) run test!(compute index!)

local var too many so that one workgroup can only run one local?





# ** TODO perf: compute! in _intersectScene


* DONE fix: how to find closestHit?

position add 图层!

find by 图层!

change 图层 to z!



# * TODO perf: remove pad?


* DONE perf: optimize traverse?

# if top layer, break;


# instance node add min layer, max layer(layer of its node)
top node add max layer(layer of its node)

add test case


in leaf:
if < intersectResult.layer, continue
if layer is leaf node's max layer, break

in stack:
if currentNode's max layer <= intersectResult.layer, continue
(judge when set child1, child2?)

# if top layer, break;



fix: buildRenderData->BottomLevel, Instance



pass run test



TODO compress top node structure data:
merge leafInstanceCount, layer


pass run test





check <2 16




* DONE perf: render 10M arcs should at 60fps !

** TODO fix error:
index.html:1 Binding size (160000000) is larger than the maximum binding size (134217728).
 - While validating entries[1] as a Buffer.
Expected entry layout: { binding: 1, visibility: ShaderStage::Compute, buffer: { type: BufferBindingType::ReadOnlyStorage, hasDynamicOffset: 0, minBindingSize: 0 } }
 - While validating [BindGroupDescriptor] against [BindGroupLayout]
 - While calling [Device].CreateBindGroup([BindGroupDescriptor]).



*** TODO test memory



result:
4M rings

init time:
10s(build bvh)

60fps
memory: 211MB




* DONE commit to user


change to:
	 let w = 0.02
	 let r = 0.05



* TODO camera scale, move

should restore canvas' width(to 760px), height(to 500px)!




* TODO write article!



* TODO render in Meta3D








* TODO fix: 锯齿








* TODO draw more geometrys

e.g. arc, polygon(triangle: just 2d vertices?), ...

(TODO can unify geometry to <=5 type geometry???)


# * TODO fix: solve transformCount: 1->error: Binding sizes are too small for bind group [BindGroup] at index 0







* TODO object add scale, rotate

perf: 2d matrix operate!













* TODO select object




* TODO fix(lbvh): in grid position:[972-974, 1003-1004] not render ring!!!

when:
createGeometryBuffer->w=0.002, r=0.005
render 100K rings



how to fix:
should add ring with position in [972-974, 1003-1004] to test!


* TODO perf: bvh

** TODO feat: build,update bvh on gpu

use HLBVH:
https://blog.csdn.net/qq_39300235/article/details/107006830
https://research.nvidia.com/sites/default/files/pubs/2010-06_HLBVH-Hierarchical-LBVH/HLBVH-final.pdf

or HLBVH with work queues:
https://research.nvidia.com/publication/simpler-and-faster-hlbvh-work-queues

or GPU-based Out-of-Core HLBVH Construction: https://diglib.eg.org/bitstream/handle/10.2312/sre20151165/041-050.pdf?sequence=1


** TODO feat: update bvh

refer to:
https://zhuanlan.zhihu.com/p/374748734
Fast, Effective BVH Updates for Animated Scenes: https://hwrt.cs.utah.edu/papers/hwrt_rotations.pdf


** TODO perf: optimize Traversal bvh on gpu

refer to https://zhuanlan.zhihu.com/p/70387497

*** TODO perf: traverse bvh: use stack-less

not limit maxDepth when build bvh!



* TODO perf: optimize memory


compress?

...
